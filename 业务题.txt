笔试地址：
https://alibole.alibaba-inc.com/
sql相关

sql题1
MySQL 中有如下两张表：

订单表 order_table 全部记录如下：
｜id ｜ order_id | sku_id | buy_num | customer_name | buy_date |
｜ 1 ｜ 560001 ｜ 1001｜ 2 ｜ zhangsan ｜ 2021-10-01｜
｜ 2 ｜ 560001 ｜ 1002｜ 1 ｜ lisi ｜ 2021-10-07｜
｜ 3 ｜ 560002 ｜ 1001｜ 1 ｜ zhangsan ｜ 2021-11-02｜
｜ 4 ｜ 560003 ｜ 1003｜ 2 ｜ zhangsan ｜ 2021-10-03｜
｜ 5 ｜ 560004 ｜ 1002｜ 3 ｜ lisi ｜ 2021-10-01｜


商品表sku_table全部记录如下：
｜ id | name | price ｜
| 1001 ｜ Note20 | 5999 ｜
| 1002 | K40 ｜ 2299 ｜
| 1003 ｜ K9 | 1999 |
| 1004 | X30 | 1399 |

要查询每个用户每个月的gmv（交易额），按month 升序、gmv 降序排序，期望结果如下
｜ customer_name ｜ month | gmv |
｜ zhanqsan ｜ 2021-11 | 11998 ｜
｜ lisi ｜ 2021-11 ｜ 2299 ｜
｜ zhanqsan ｜ 2021-12 | 9997 ｜ 
｜ lisi ｜ 2021-12 ｜ 6897 ｜ 

请写出对应的sql查询语句
SELECT t1.customer_name,
       substring(t1.buy_date, 1, 7)  as month,
       SUM(t1.buy_num * t2.price)  AS gmv
  FROM
 order_table t1 JOIN sku_table t2 ON t1.sku_id= t2.id
 GROUP BY t1.customer_name,
         substring(t1.buy_date, 1, 7)
 ORDER BY month,
         gmv DESC;
题目简单版
要查询每个用户的总交易额， 按总交易额降序排序
请写出对应的sql查询语句

编程题

单例
/**
编写一个单例模式
使用两种及以上的代码实现
**/
public class Singleton {


}

业务题
// 1. 按要求完成User类的实现定义
// 2. 按要求完成findSameUser方法的逻辑实现

/*
 * 定义一个用户类User
 * 要求有 姓名，年龄，性别 三个属性。
*/
public class User {
	// todo

	/**
   * 找出入参中同名、同年龄、同性别的用户，将他们从入参集合allUsers中删除。
   * 并在返回值中，返回删除的这些用户
   * @param allUsers 所有用户
   * @return
   */
  public static List<User> findSameUser(List<User> allUsers) {

  }
}

    

字符串
验证回文串
给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。
说明：本题中，我们将空字符串定义为有效的回文串。
示例 1:
输入: "A man, a plan, a canal: Panama"
输出: true
示例 2:
输入: "race a car"
输出: false

比大小
第一题
实现一个方法，比较两个字符串版本号的大小（这里假定版本号始终有三位，只有非负整数，没有其他字符）
- `1.0.0` 大于 `0.9.5`
- `2.1.9` 大于 `2.0.11`
- `3.0.0` 等于 `3.0.0`
  结果
- 大于返回：1
- 等于返回：0
- 小于返回：-1
*/

设计一个函数，用于判断

寻找数组的中心下标
给你一个整数数组 nums，请编写一个能够返回数组 “中心下标” 的方法。数组 中心下标 是数组的一个下标，其左侧所有元素相加的和等于右侧所有元素相加的和。如果数组不存在中心下标，返回 -1 。如果数组有多个中心下标，应该返回最靠近左边的那一个。
注意：中心下标可能出现在数组的两端。
示例 1：
输入：nums = [1, 7, 3, 6, 5, 6]
输出：3
解释：中心下标是 3 。左侧数之和 (1 + 7 + 3 = 11)，右侧数之和 (5 + 6 = 11) ，二者相等。
示例 2：
输入：nums = [1, 2, 3]
输出：-1
解释：数组中不存在满足此条件的中心下标。
示例 3：
输入：nums = [2, 1, -1]
输出：0
解释：中心下标是 0 。下标 0 左侧不存在元素，视作和为 0 ；右侧数之和为 1 + (-1) = 0 ，二者相等。
提示：
nums 的长度范围为 [0, 10000]。
任何一个 nums[i] 将会是一个范围在 [-1000, 1000]的整数。

合并两个有序链表


快速排序

public static void quickSort(int left, int right, int[] arr){
//补充代码
}

HashMap的使用
1. 两数之和
给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。
你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。
你可以按任意顺序返回答案。

示例 1：
输入：nums = [2,7,11,15], target = 9
输出：[0,1]
解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。

示例 2：
输入：nums = [3,2,4], target = 6
输出：[1,2]

示例 3：
输入：nums = [3,3], target = 6
输出：[0,1]
 
提示：
● 2 <= nums.length <= 104
● -109 <= nums[i] <= 109
● -109 <= target <= 109
● 只会存在一个有效答案
